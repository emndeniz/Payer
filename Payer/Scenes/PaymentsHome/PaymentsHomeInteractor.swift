//
//  PaymentsHomeInteractor.swift
//  Payer
//
//  Created by Emin on 21.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class PaymentsHomeInteractor {
    private let coreDataStack: CoreDataStack = CoreDataStack()
    private var payerStore: PayerStoreProtocol
    
    init (payerStore: PayerStoreProtocol? = nil){
        // Allows injection
        if let payerStore = payerStore {
            self.payerStore = payerStore
        }else {
            self.payerStore =  PayerStore(managedObjectContext: coreDataStack.mainContext, coreDataStack: coreDataStack)
        }
        
    }
}

// MARK: - Extensions -

extension PaymentsHomeInteractor: PaymentsHomeInteractorInterface {
    
    func loadCardData(completion: @escaping ((Result<[BankCardItem], Error>) -> Void)) {
        payerStore.getCardInfo { result in
            completion(result)
        }
        
        
        
    }
    
    func loadTransactions(completion: @escaping ((Result<[TransactionItem], Error>) -> Void)) {
        payerStore.getTransactions { result in
            completion(result)
        }
    }
    
}

// - MARK: This section has functions to generate sample data in app-
extension PaymentsHomeInteractor {
    
    /// This function generates dummy data for subscriptions.
    /// Until add subscription UI added, this function can create dummy data.
    private func generateSubscriptions() {
        let currentDate = Date()
        
        var monthsDiff = -1
        for subs in AvailableTransactionTypes.allCases {
            var dateComponent = DateComponents()
            dateComponent.month = monthsDiff
            let calculatedDate = Calendar.current.date(byAdding: dateComponent, to: currentDate)
            let subscription = SubscriptionItem(id: UUID(),
                                                renewalDate: calculatedDate, name: subs.description, amount: subs.amount)
            
            monthsDiff += 1
            
            payerStore.saveSubscription(subscription: subscription) { result in
                switch result {
                    
                case .success(let data):
                    Logger.log.info("Successfully write the subscription data", context: data)
                case .failure(let err):
                    Logger.log.error("Failed to write subscription data, err:",context: err)
                }
                
            }
        }
        
    }
    
    private func generateCardData(){
        let bankcard = BankCardItem(userName: "Mehmet Emin Deniz",
                                    cardNumber: "5123-4567-7680-6742",
                                    expirationDate: Date(timeIntervalSince1970: 1726934694),
                                    vendor: "MasterCard",
                                    balance: 1_578_234,
                                    ccv: 123)
        payerStore.saveCardInfo(card: bankcard) { result in
            switch result {
                
            case .success(let data):
                Logger.log.info("Successfully write the card data", context: data)
            case .failure(let err):
                Logger.log.error("Failed to write card data, err:",context: err)
            }
        }
    }
}
