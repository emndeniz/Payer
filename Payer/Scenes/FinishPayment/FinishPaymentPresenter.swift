//
//  FinishPaymentPresenter.swift
//  Payer
//
//  Created by Emin on 22.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class FinishPaymentPresenter {

    // MARK: - Private properties -

    private unowned let view: FinishPaymentViewInterface
    private let interactor: FinishPaymentInteractorInterface
    private let wireframe: FinishPaymentWireframeInterface

    // MARK: - Lifecycle -

    
    init(
        view: FinishPaymentViewInterface,
        interactor: FinishPaymentInteractorInterface,
        wireframe: FinishPaymentWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension FinishPaymentPresenter: FinishPaymentPresenterInterface {
    func getGenericTexFieldDatas() -> [GenericTextFieldData] {
        return [ GenericTextFieldData(label: "ibanLabel", placeHolder: "iban_placeHolder", text: "NL18INGB3696794244"),
                 GenericTextFieldData(label: "nameSurnameLabel", placeHolder: "nameSurname_placeholder", text: "Emin"),
                 GenericTextFieldData(label: "noteLabel", placeHolder: "note_placeHolder"),
                 GenericTextFieldData(label: "amountLabel", placeHolder: "amount_placeHolder")]
    }
    
    func transferButtonAction(transferDatas:[GenericTextFieldData]) {
        for data in transferDatas {
            if data.label == NSLocalizedString("ibanLabel", comment: ""){
                if data.text.isEmpty || !checkIbanValid(iban: data.text){
                    wireframe.showAlert(with:"error_title" , message: "error_incorrectIban")
                    return
                }
            }else if data.label == NSLocalizedString("nameSurnameLabel", comment: ""){
                if data.text.isEmpty {
                    wireframe.showAlert(with:"error_title" , message: "error_missingNameSurname")
                    return
                }
            }else if data.label == NSLocalizedString("amountLabel", comment: ""){
                if data.text.isEmpty {
                    wireframe.showAlert(with:"error_title" , message: "error_missingAmount")
                    return
                }
            }
        }
    
       
        interactor.executeTransfer(iban: transferDatas[0].text, to: transferDatas[1].text, note: transferDatas[2].text, amount: decimal(string: transferDatas[3].text))
    }
    
}

extension FinishPaymentPresenter {
    private func checkIbanValid(iban:String) -> Bool{
        let pattern = "^([A-Z]{2}[ \\-]?[0-9]{2})(?=(?:[ \\-]?[A-Z0-9]){9,30}$)((?:[ \\-]?[A-Z0-9]{3,5}){2,7})([ \\-]?[A-Z0-9]{1,3})?$"
        let result = iban.range(of: pattern, options:.regularExpression)
        
        return result != nil

    }
    
    //TODO: This rule set is not enough for amount checks. For a real project we whould have more amout rules.
    func decimal(string: String) -> NSDecimalNumber {
        let formatter = NumberFormatter()
        formatter.generatesDecimalNumbers = true
        formatter.decimalSeparator = ","
        let num  = formatter.number(from: string) as? NSDecimalNumber ?? 0
        return num
    }
}

