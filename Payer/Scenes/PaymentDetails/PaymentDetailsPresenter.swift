//
//  PaymentDetailsPresenter.swift
//  Payer
//
//  Created by Emin on 22.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class PaymentDetailsPresenter {

    // MARK: - Private properties -

    private unowned let view: PaymentDetailsViewInterface
    private let interactor: PaymentDetailsInteractorInterface
    private let wireframe: PaymentDetailsWireframeInterface

    private let transaction: TransactionItem
    // MARK: - Lifecycle -

    init(
        view: PaymentDetailsViewInterface,
        interactor: PaymentDetailsInteractorInterface,
        wireframe: PaymentDetailsWireframeInterface,
        transaction: TransactionItem
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.transaction = transaction
    }
}

// MARK: - Extensions -

extension PaymentDetailsPresenter: PaymentDetailsPresenterInterface {
    func getTitle() -> String {
        return NSLocalizedString(transaction.title ?? "", comment: "")
    }
    
    func getDetails() -> String {
        return NSLocalizedString(transaction.details ?? "", comment: "")
    }
    
    func getDate() -> String {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "DD/MM/YYY - HH:mm"
        var dateStr = ""
        
        if let date = transaction.date {
            dateStr = dateFormatter.string(from:date)
        }
     
        
        return dateStr
    }
    
    func getTransactionFee() -> String {
        convertDecimalToStr(decimal: transaction.charge)
    }
    
    func getAmount() -> String {
        convertDecimalToStr(decimal: transaction.amount)
    }
    
    private func convertDecimalToStr(decimal:NSDecimalNumber?) -> String{
        let formatter = NumberFormatter()
        formatter.maximumFractionDigits = 2
        formatter.minimumFractionDigits = 0
        formatter.currencyCode = "EUR"
        formatter.numberStyle = .currency
        
       return formatter.string(for: decimal) ?? "0"
    }
}
